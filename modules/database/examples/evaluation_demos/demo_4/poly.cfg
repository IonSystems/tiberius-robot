------------------------------------------------------------------------------
-- Project:	Polyhedra
-- Copyright:	Copyright (C) 1994-2014 by Enea Software AB
--		All Rights Reserved
-- Date:	$Date: 2014/01/06 14:49:01 $
-- Revision:	$Id: poly.cfg,v 1.9 2014/01/06 14:49:01 andy Exp $
-- Author:	Dave Stow
-- Description:	
------------------------------------------------------------------------------

--
-- POLYHEDRA DEMO SUITE 
-- Demo 4
--
-- Demonstration of Fault Tolerance
------------------------------------
--
-- v1.0 -	Dave Stow
--		First Version
--

-------------------------------------------------------------------------------
-- NOTE: this is ILLUSTRATIVE CODE, provided on an 'as is' basis to help
-- demonstrate one or more features of the Polyhedra product.
-- It may well need adaption for use in a live installation, and
-- Enea Software AB and its agents and distributors do not warrant this code.
-------------------------------------------------------------------------------


---------------------------------------------
-- Resources for rtrdbs 


-- Define port for arbtration service
arb_port:
arbitrator_service  		= 7200
arbitrator_protocol 		= TCP

-- Entry points for RTRDB
db:arb_port
type		    		= rtrdb
enable_journalling  		= false
suppress_dvi 			= yes
suppress_log 			= yes
load_file    			= test.dat
enable_parallel_allocator	= true


db1:db
journal_service        		= 8051
other_journal_service   	= 8052
load_file_directory       	= logdir1
data_service 			= 8001

db2:db
journal_service        		= 8052
other_journal_service   	= 8051
load_file_directory       	= logdir2
data_service 			= 8002
 

--------------------------------------------
-- sql sessions

-- SQLC session to database 1
sql1:
type 				= sqlc
data_service 			= 8001

-- SQLC session to database 2
sql2:
type 				= sqlc
data_service 			= 8002

-- Fault Tolerant SQLC session
sql_ft:
type				= sqlc
data_service			= 8001,8002
ft_enable			= true


-------------------------------------------------
-- Arbitration mechanism. This demo arbitrator
-- is written in CL, using the CL Client (CLC)
-- to allow us to have a cross platform arbitrator.
-- This should not be taken in any way to be a
-- complete arbitration service.

arbiter:arb_port
type               		= clc
cl_library         		= arbiter.cl
root_class         		= main
heartbeat_interval 		= 5000000
heartbeat_debugs   		= yes

-------------------------------------------------


